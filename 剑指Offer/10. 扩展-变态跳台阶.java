/**
三种解法

解法1：

当n=1时，f(1)=1。

当n大于1时，归纳总结可知：跳上n级台阶，第一次跳1级的话，有f(n-1)种方法；第一次跳2级的话，有f(n-2)种方法……第一次跳n-1级的话，有f(1)种方法；直接跳n级的话，有1种方法，所以可以得到如下公式：

f(n) = f(n-1)+f(n-2)+......f(1)+1　　（n≥2）

f(n-1) = f(n-2)+f(n-3)+.....f(1)+1　　（n>2）

由上面两式相减可得，f(n)-f(n-1)=f(n-1)，即f(n) = 2*f(n-1) (n>2)

最终结合f(1)和f(2)，可以推得：**f(n)=2^(n-1)**

解法2：

假设跳到第n级总共需要k次，说明要在中间n-1级台阶中选出任意k-1个台阶，即C(n-1,k-1)种方法。

所以：跳1次就跳上n级台阶，需要C(n-1,0)种方法；跳2次需要C(n-1,1)种方法……跳n次需要C(n-1,n-1)种方法

总共需要跳C(n-1,0)+C(n-1,1)+C(n-1,2)+……C(n-1,n-1)=**2^(n-1)**种方法。

解法3：

除了必须到达最后一级台阶，第1级到第n-1级台阶都可以有选择的跳，也就是说对于这n-1个台阶来说，每个台阶都有跳上和不跳上2种情况，所以一共有**2^(n-1)**种方法。
*/

public class Solution {
    public int JumpFloorII(int target) {
        if (target <= 0)
            throw new RuntimeException("错误，台阶数应从1开始！");
        return (int) Math.pow(2, (double)(target-1));
    }
}
